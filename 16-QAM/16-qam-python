import matplotlib.pyplot as plt
import numpy as np

mapping_table = {
    (0,0,0,0) : -3-3j,
    (0,0,0,1) : -3-1j,
    (0,0,1,0) : -3+3j,
    (0,0,1,1) : -3+1j,
    (0,1,0,0) : -1-3j,
    (0,1,0,1) : -1-1j,
    (0,1,1,0) : -1+3j,
    (0,1,1,1) : -1+1j,
    (1,0,0,0) :  3-3j,
    (1,0,0,1) :  3-1j,
    (1,0,1,0) :  3+3j,
    (1,0,1,1) :  3+1j,
    (1,1,0,0) :  1-3j,
    (1,1,0,1) :  1-1j,
    (1,1,1,0) :  1+3j,
    (1,1,1,1) :  1+1j
}

comparision_table = {
    (0,0,0,0) : 0,
    (0,0,0,1) : 1,
    (0,0,1,0) : 2,
    (0,0,1,1) : 3,
    (0,1,0,0) : 4,
    (0,1,0,1) : 5,
    (0,1,1,0) : 6,
    (0,1,1,1) : 7,
    (1,0,0,0) : 8,
    (1,0,0,1) : 9,
    (1,0,1,0) : 10,
    (1,0,1,1) : 11,
    (1,1,0,0) : 12,
    (1,1,0,1) : 13,
    (1,1,1,0) : 14,
    (1,1,1,1) : 15
}

M=16
Bits_per_symbol=np.log2(M)
Order=pow(2,Bits_per_symbol)
#print ("Ld=",Ld)
#print ("Lb=",Lb)
if M != Order:
   print("the value of M is only acceptable if log2(M)is an integer")

input_bit_arr = np.array([1,1,0,0,0,1,1,1,0,1,0,1,0,1,0,0])
no_bits = np.size(input_bit_arr)
bit_period = pow(10,-6)
symbol_period = bit_period * Bits_per_symbol
symbol_rate = 1//symbol_period
FreqC = 2 * symbol_rate
t = np.arange(symbol_period/100, symbol_period + symbol_period/100, symbol_period/100)
ss = len(t)
print(ss)


bit = np.empty(0)

for i in range(len(input_bit_arr)):
    if  input_bit_arr[i] == 1:
        seq = np.ones(100, dtype=int)
    else:
        seq = np.zeros(100, dtype=int)
    bit = np.append(bit,seq)


t1 = np.arange(bit_period/100, (100*bit_period*len(input_bit_arr))/100, bit_period/100)
t1 = np.append(t1,16*bit_period/100)
#print(len(t))

plt.figure(1)
plt.plot(t1, bit, 'b+')
plt.xlabel('time')
plt.ylabel('amplitude')
plt.title( 'a digital signal' )



data_reshape = np.reshape(input_bit_arr, (int(np.log2(M)), int(no_bits/np.log2(M))))
print(data_reshape)

l = (int(np.log2(M)),1)
value = np.zeros(l,dtype=int)
#print(value)
value_temp = 0

for i in range(int(np.log2(M))):
    value_temp = 0
    for j in range(int(no_bits/np.log2(M))):
       # print(data_reshape[i,j])
       value_temp = value_temp + pow(2 ,(int(no_bits/np.log2(M))-j-1)) * data_reshape[i,j]
        #print(pow(2 ,(int(no_bits/np.log2(M))-j-1)) * data_reshape[i,j])
    value[i,0] = value_temp
print(value)

Real_part = np.zeros(l,dtype=int)
Imaginary_part = np.zeros(l,dtype=int)



for i in range(int(np.log2(M))):
    for b3 in [0, 1]:
        for b2 in [0, 1]:
            for b1 in [0, 1]:
                for b0 in [0, 1]:
                    B = (b3, b2, b1, b0)
                    C   = (b3, b2, b1, b0)
                    #print(B)
                    Q = mapping_table[B]
                    Q1 = comparision_table[C]
                    if value[i,0] == Q1:
                        Real_part[i,0] = Q.real
                        Imaginary_part[i,0] = Q.imag
                        plt.figure(2)
                        plt.plot(Real_part[i,0], Imaginary_part[i,0], 'bo')
                        plt.text(Real_part[i,0], Imaginary_part[i,0] + 0.2, "".join(str(x) for x in B), ha='center')

print(Real_part)
print(Imaginary_part)


QAM_signal = np.empty(0)

for i in range(int(np.log2(M))):
    out_real = Real_part[i,0] *  np.cos(2 * np.pi * FreqC * t)
    out_img = Imaginary_part[i,0] * np.sin(2 * np.pi * FreqC * t)
    out = out_img + out_real
    QAM_signal = np.append(QAM_signal,out)

print(QAM_signal)
print(np.size(QAM_signal))
tt = np.arange(symbol_period/100, symbol_period*len(Real_part) + symbol_period/100, symbol_period/100)
#tt = np.append(tt,1)
plt.figure(3)
plt.plot(tt,QAM_signal,'bo')


def calc_fft(y):
    n = len(y)  # length of the signal
    k = np.arange(n)
    t2 = symbol_period
    frq = k / t2  # two sides frequency range
    frq = frq[range(n // 2)]  # one side frequency range
    Y = np.fft.fft(y) / n  # fft computing and normalization
    Y = Y[range(n // 2)]
    return Y, frq

Z, frq = calc_fft(QAM_signal)
plt.figure(4)
plt.plot(frq, abs(Z), 'r')


#demodulation
m1 = np.zeros((1,1),dtype=int)
m2 = np.zeros((1,1),dtype=int)
print(len(QAM_signal))
for n in range(ss,len(QAM_signal),ss):
    t3 = np.arange(symbol_period/100, symbol_period + symbol_period/100, symbol_period/100)
    y1 = np.cos(2 * np.pi * FreqC * t)
    y2 = np.sin(2 * np.pi * FreqC * t)
    aa = QAM_signal[(n-(ss-1)) : n+1]
    mm1 = np.multiply(y1, aa)
    mm2 = np.multiply(y2, aa)
    z1 = np.trapz(t3, mm1)
    z2 = np.trapz(t3, mm2)
    zz1 = round(2 * z1 / symbol_period)
    zz2 = round(2 * z2 / symbol_period)
    m1 = np.append(m1,zz1)
    m2 = np.append(m2,zz2)

print(len(m1))

#imporvement can be done
for j in range(len(m1)):
    if m1[j] == 0:
        m1[j] = 1
    elif m1[j] == 2:
        m1[j] = 3
    elif m1[j] == -2:
        m1[j] = -3
    elif m1[j] == 4:
        m1[j] = 3
    elif m1[j] == -4:
        m1[j] = -3
    else:
        m1[j] = m1[j]

for j in range(len(m1)):
    if m2[j] == 0:
        m2[j] = 1
    elif m2[j] == 2:
        m2[j] = 3
    elif m2[j] == -2:
        m2[j] = -3
    elif m2[j] == 4:
        m2[j] = 3
    elif m2[j] == -4:
        m2[j] = -3
    else:
        m2[j] = m2[j]

gt = []
for i in range(len(m1)):
    gt.append(complex(m1[i],m2[i]))

print(gt)
print(m1)
print(m2)

demodulated_bits = []
Q_demodulation  = 0
for i in range(int(np.log2(M))):
    for b3 in [0, 1]:
        for b2 in [0, 1]:
            for b1 in [0, 1]:
                for b0 in [0, 1]:
                    B = (b3, b2, b1, b0)
                    #print(B)
                    Q_demodulation = mapping_table[B]
                    if gt[i] == Q_demodulation:
                        print(B)
                        demodulated_bits = np.append(demodulated_bits,B)





#print(demodulated_bits)
received_bit = np.empty(0)
for i in range(len(demodulated_bits)):
    if  demodulated_bits[i] == 1:
        seq = np.ones(100, dtype=int)
    else:
        seq = np.zeros(100, dtype=int)
    received_bit = np.append(received_bit,seq)


t4 = np.arange(bit_period/100, (100*bit_period*len(input_bit_arr))/100 + bit_period/100, bit_period/100)
#t4 = np.append(t1,16*bit_period/100)
#print(len(t))
plt.figure(5)
plt.plot(t4, received_bit, 'r+')
plt.xlabel('time')
plt.ylabel('amplitude')
plt.title( 'a digital received_signal' )
plt.show()
